from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from pyexpat.errors import messages
from wsproto.events import Message

from states.states_playlists import PlaylistsStates
from states.states_recommendations import RecommendationsStates

router = Router()

playlists = {"playlist 1" : ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5"],
                  "playlist 2": ["Song 6", "Song 7", "Song 8", "Song 9", "Song 10"],
                  "playlist 3": ["Song 11", "Song 12", "Song 13", "Song 14", "Song 15"]}


#—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
@router.message(F.text.endswith("–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã"))
async def start_recommendations(message: types.Message, state: FSMContext):
    markup = InlineKeyboardBuilder()

    for name in playlists.keys():
        markup.add(types.InlineKeyboardButton(text = str(name), callback_data= str(name)))
    markup.adjust(1, 1)

    sent_message = await message.answer(text="–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:", reply_markup=markup.as_markup())
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(PlaylistsStates.choose_playlist)


@router.callback_query(PlaylistsStates.choose_playlist)
async def playlist_menu(callback: types.CallbackQuery, state: FSMContext):
    name_playlist = callback.data
    await state.update_data(name_playlist=name_playlist)
    markup = InlineKeyboardBuilder()
    listen = types.InlineKeyboardButton(
        text="üéß –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="listen"
    )
    edit = types.InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="edit"
    )
    create = types.InlineKeyboardButton(
        text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="create"
    )
    markup.add(listen, edit, create )
    markup.adjust(1, 1)

    songs = ""
    count = 0
    for name in playlists[name_playlist]:
        count += 1
        songs += f"\n{count}: {name}"
    await callback.message.edit_text(text=f"{songs}", reply_markup=markup.as_markup())
    await state.set_state(PlaylistsStates.choose_action)

#—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data == "edit", PlaylistsStates.choose_action)
async def edit_menu(callback: types.CallbackQuery, state: FSMContext):
    markup = InlineKeyboardBuilder()
    rename = types.InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
        callback_data="rename"
    )
    delete = types.InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="delete"
    )
    edit_songs = types.InlineKeyboardButton(
        text="üéµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Å–Ω–∏",
        callback_data="edit_songs"
    )
    markup.add(rename, edit_songs, delete)
    markup.adjust(1, 1)
    await callback.message.edit_text(text="–í—ã–±–∏—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=markup.as_markup())
    await state.set_state(PlaylistsStates.wait_choose)

#–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data == "rename", PlaylistsStates.wait_choose)
async def rename(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"
    await callback.message.edit_text(text=mes_text)
    await state.set_state(PlaylistsStates.rename)

@router.message(F.text, PlaylistsStates.rename)
async def rename(message: types.Message, state: FSMContext):
    data = await state.get_data()
    try:
        playlists[message.text] = playlists.pop(str(data['name_playlist']))
    except KeyError:
        await message.answer(text="–¢–∞–∫–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ—Ç")
    mes_text = f"–ü–ª–µ–π–ª–∏—Å—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –Ω–∞ {message.text}"
    await message.answer(text=mes_text)
    await state.set_state(PlaylistsStates.action)


#—É–¥–∞–ª–µ–Ω–∏–µ
@router.callback_query(F.data == "delete", PlaylistsStates.wait_choose)
async def rename(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    mes_text = f"–ü–ª–µ–π–ª–∏—Å—Ç {data['name_playlist']} —É–¥–∞–ª–µ–Ω"
    try:
        playlists.pop(str(data['name_playlist']))
    except KeyError:
        await callback.message.edit_text(text="–¢–∞–∫–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ—Ç")
    await callback.message.edit_text(text=mes_text)
    await state.set_state(PlaylistsStates.action)


#—Ä–µ–¥–∞–∫—Ç—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Å–µ–Ω
@router.callback_query(F.data == "edit_songs", PlaylistsStates.wait_choose)
async def rename(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–ù–∞–ø–∏—à–∏—Ç–µ –∏–Ω–¥–µ–∫—Å(—ã) –ø–µ—Å–Ω–∏(–ø–µ—Å–µ–Ω) –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –ß–ï–†–ï–ó –ó–ê–ü–Ø–¢–£–Æ"
    await callback.message.edit_text(text=mes_text)
    await state.set_state(PlaylistsStates.edit_songs)


@router.message(F.text, PlaylistsStates.edit_songs)
async def rename(message: types.Message, state: FSMContext):
    data = await state.get_data()
    indexes = message.text.split(",")
    try:
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏–Ω–¥–µ–∫—Å—ã –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        for i in sorted(indexes, reverse=True):
            if 0 <= int(i) < len(playlists[data['name_playlist']]):
                del playlists[data['name_playlist']][int(i) - 1]
    except Exception as e:
        await message.answer(text=f"–û—à–∏–±–∫–∞:{e}")
        return

    mes_text = f"–ü–µ—Å–Ω—è(–∏) —É–¥–∞–ª–µ–Ω–∞(—ã)"
    await message.answer(text=mes_text)
    await state.set_state(PlaylistsStates.action)


#—Ñ—É–Ω–∫—Ü–∏—è —É–¥–∞–ª–µ–Ω–∏—è
def safe_delete_elements(original: list, indexes: list) -> list:
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –ø–æ –∏–Ω–¥–µ–∫—Å–∞–º —Å –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π"""
    if not isinstance(original, list):
        raise TypeError(f"–û–∂–∏–¥–∞–µ—Ç—Å—è —Å–ø–∏—Å–æ–∫, –ø–æ–ª—É—á–µ–Ω {type(original).__name__}")

    if not isinstance(indexes, (list, tuple, set)):
        raise TypeError(f"–ò–Ω–¥–µ–∫—Å—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π, –ø–æ–ª—É—á–µ–Ω {type(indexes).__name__}")

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–µ–∫—Å–æ–≤
    valid_indexes = []
    for idx in set(indexes):  # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
        if not isinstance(idx, int):
            print(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ—Ü–µ–ª–æ—á–∏—Å–ª–µ–Ω–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞: {idx} ({type(idx).__name__})")
            continue

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö –∏–Ω–¥–µ–∫—Å–æ–≤
        normalized_idx = idx if idx >=0 else len(original) + idx

        if 0 <= normalized_idx < len(original):
            valid_indexes.append(normalized_idx)
        else:
            print(f"–ü—Ä–æ–ø—É—Å–∫ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞: {idx} (–¥–æ–ø—É—Å—Ç–∏–º—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω: 0-{len(original)-1})")

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    for i in sorted(valid_indexes, reverse=True):
        del original[i]

    return original


#—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@router.callback_query(F.data == "create", PlaylistsStates.choose_action)
async def rename(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"
    await callback.message.edit_text(text=mes_text)

    await state.set_state(PlaylistsStates.create_playlist)

@router.message(F.text, PlaylistsStates.create_playlist)
async def rename(message: types.Message, state: FSMContext):
    text = message.text
    if text not in playlists:
        playlists[text] = []
    else:
        await message.answer(text="–¢–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    mes_text = f"–ü–ª–µ–π–ª–∏—Å—Ç {message.text} —Å–æ–∑–¥–∞–Ω"
    await message.answer(text=mes_text)
    await state.set_state(PlaylistsStates.action)




#–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–µ—Å–µ–Ω
@router.callback_query(F.data == "listen", PlaylistsStates.choose_action)
async def listen_menu(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    markup = InlineKeyboardBuilder()
    sequential = types.InlineKeyboardButton(
        text="‚ñ∂Ô∏è –ü–æ –ø–æ—Ä—è–¥–∫—É",
        callback_data="sequential"
    )
    shuffle = types.InlineKeyboardButton(
        text="üîÄ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å",
        callback_data="shuffle"
    )
    markup.add(shuffle, sequential)
    markup.adjust(1, 1)

    songs = ""
    for song in playlists[data['name_playlist']]:
        songs += f"\n{song}"
    await callback.message.edit_text(text=songs, reply_markup=markup.as_markup())
    await state.set_state(PlaylistsStates.wait_choose)



@router.callback_query(F.data.in_({"sequential", "shuffle"}), PlaylistsStates.wait_choose)
async def change_song(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    order = callback_query.data

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    original_songs = data.get('original_list', playlists[data['name_playlist']])
    await state.update_data(original_list=original_songs)

    # 2. –†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–ø–∏–µ–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    songs = original_songs.copy()

    if order == 'shuffle':
        import random
        # 3. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ø–∏—é, –Ω–µ –∏–∑–º–µ–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª
        shuffled_songs = songs.copy()
        random.shuffle(shuffled_songs)
        await state.update_data(page=0, current_list=shuffled_songs)
    else:
        # 4. –î–ª—è sequential –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
        await state.update_data(page=0, current_list=songs)

    # 5. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    new_data = await state.get_data()
    song_list = new_data['current_list']
    page = new_data.get('page', 0)

    # 6. –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    start = page * 1
    end = start + 1
    current_songs = song_list[start:end]

    markup = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if page > 0:
        markup.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"previous:{page - 1}"
        ))
    if end < len(song_list):
        markup.add(types.InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
            callback_data=f"next:{page + 1}"
        ))
    markup.adjust(1, 1)

    songs_text = ("\n".join(current_songs) if current_songs else "–ù–µ—Ç –ø–µ—Å–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

    await callback_query.message.edit_text(songs_text, reply_markup=markup.as_markup())
    await state.update_data(page=page)


@router.callback_query(F.data.startswith("previous:"), PlaylistsStates.wait_choose)
@router.callback_query(F.data.startswith("next:"), PlaylistsStates.wait_choose)
async def navigate_pages(callback_query: types.CallbackQuery, state: FSMContext):
    # 8. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    data = await state.get_data()
    page = int(callback_query.data.split(":")[1])

    # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    max_page = len(data['current_list']) - 1
    page = max(0, min(page, max_page))

    await state.update_data(page=page)

    # 10. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    data = await state.get_data()
    song_list = data['current_list']

    # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ change_song)
    start = page * 1
    end = start + 1
    current_songs = song_list[start:end]

    markup = InlineKeyboardBuilder()
    if page > 0:
        markup.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"previous:{page - 1}"
        ))
    if end < len(song_list):
        markup.add(types.InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
            callback_data=f"next:{page + 1}"
        ))
    markup.adjust(1, 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
    songs_text = ("\n".join(current_songs) if current_songs else "–ù–µ—Ç –ø–µ—Å–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

    await callback_query.message.edit_text(songs_text, reply_markup=markup.as_markup())

