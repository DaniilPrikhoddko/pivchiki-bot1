from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from sources.postgres.sql_requests import (
    rename_playlist,
    delete_playlist,
    remove_song_from_playlist,
    create_playlist,
    get_all_playlists, rebase_song_from_playlist
)
from states.states_playlists import PlaylistsStates

router = Router()


#—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
@router.message(F.text.endswith("–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã"))
async def start_recommendations(message: types.Message, state: FSMContext):
    # –∑–∞–ø—Ä–æ—Å –≤ –ë–î
    user_id = message.from_user.id
    playlists = get_all_playlists(user_id)

    await state.update_data(playlists=playlists)

    markup = InlineKeyboardBuilder()
    create = types.InlineKeyboardButton(
        text="‚ûï –°–æ–∑–¥–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="create"
    )
    markup.add(create)
    for name in playlists.keys():
        markup.add(types.InlineKeyboardButton(text = str(name), callback_data= str(name)))
    markup.adjust(1, 1)


    sent_message = await message.answer(text="–í–∞—à–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã:", reply_markup=markup.as_markup())
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(PlaylistsStates.choose_playlist)


#—Å–æ–∑–¥–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@router.callback_query(F.data == "create", PlaylistsStates.choose_playlist)
async def create(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"
    await callback.message.edit_text(text=mes_text)

    await state.set_state(PlaylistsStates.create_playlist)


@router.message(F.text, PlaylistsStates.create_playlist)
async def create(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    data = await state.get_data()
    playlists = data['playlists']
    if text not in playlists:
        ok = create_playlist(user_id, text)
        if not ok:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
        else:
            mes_text = f"–ü–ª–µ–π–ª–∏—Å—Ç {message.text} —Å–æ–∑–¥–∞–Ω"
            await message.answer(text=mes_text)
    else:
        await message.answer(text="–¢–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return
    await state.set_state(PlaylistsStates.action)


@router.callback_query(PlaylistsStates.choose_playlist)
async def playlist_menu(callback: types.CallbackQuery, state: FSMContext):
    if callback.data == 'create':
        return

    name_playlist = callback.data
    await state.update_data(name_playlist=name_playlist)
    data = await state.get_data()
    playlists = data['playlists']

    markup = InlineKeyboardBuilder()
    listen = types.InlineKeyboardButton(
        text="üéß –ü—Ä–æ—Å–ª—É—à–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="listen"
    )
    edit = types.InlineKeyboardButton(
        text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="edit"
    )
    markup.add(listen, edit,)
    markup.adjust(1, 1)

    songs = ""
    count = 0
    if len(playlists[name_playlist]) != 0:
        for name in playlists[name_playlist]:
            count += 1
            songs += f"\n{count}: {name}"
        await callback.message.edit_text(text=f"{songs}", reply_markup=markup.as_markup())
        await state.set_state(PlaylistsStates.choose_action)
    else:
        await callback.message.edit_text(text=f"–ü–ª–µ–π–ª–∏—Å—Ç –ø—É—Å—Ç")




#—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data == "edit", PlaylistsStates.choose_action)
async def edit_menu(callback: types.CallbackQuery, state: FSMContext):
    markup = InlineKeyboardBuilder()
    data = await state.get_data()
    rename = types.InlineKeyboardButton(
        text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ",
        callback_data="rename"
    )
    edit_songs = types.InlineKeyboardButton(
        text="üéµ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Å–Ω–∏",
        callback_data="edit_songs"
    )
    markup.add(rename, edit_songs)
    markup.adjust(1, 1)

    #–ë–∞–∑–æ–≤—ã–π –ø–ª–µ–π–ª–∏—Å—Ç –Ω–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å
    if data['name_playlist'] != '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ':
        delete = types.InlineKeyboardButton(
            text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç",
            callback_data="delete"
        )
        markup.add(delete)

    await callback.message.edit_text(text="–í—ã–±–∏—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é", reply_markup=markup.as_markup())
    await state.set_state(PlaylistsStates.wait_choose)

#–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ
@router.callback_query(F.data == "rename", PlaylistsStates.wait_choose)
async def rename(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞"
    await callback.message.edit_text(text=mes_text)
    await state.set_state(PlaylistsStates.rename)

@router.message(F.text, PlaylistsStates.rename)
async def rename(message: types.Message, state: FSMContext):
    user_id = message.from_user.id

    data = await state.get_data()
    try:
        ok = rename_playlist(data['name_playlist'], message.text, user_id)
        if not ok:
            await message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
        else:
            mes_text = f"–ü–ª–µ–π–ª–∏—Å—Ç –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω –Ω–∞ {message.text}"
            await message.answer(text=mes_text)
    except KeyError:
        await message.answer(text="–¢–∞–∫–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ—Ç")

    await state.set_state(PlaylistsStates.action)


#—É–¥–∞–ª–µ–Ω–∏–µ –ø–ª–µ–π–ª–∏—Å—Ç–∞
@router.callback_query(F.data == "delete", PlaylistsStates.wait_choose)
async def delete(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.message.from_user.id

    data = await state.get_data()
    mes_text = f"–ü–ª–µ–π–ª–∏—Å—Ç {data['name_playlist']} —É–¥–∞–ª–µ–Ω"
    try:
        ok = delete_playlist(data['name_playlist'], user_id)
        if not ok:
            await callback.message.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
        else:
            await callback.message.edit_text(text=mes_text)
    except KeyError:
        await callback.message.edit_text(text="–¢–∞–∫–æ–≥–æ –ø–ª–µ–π–ª–∏—Å—Ç–∞ –Ω–µ—Ç")

    await state.set_state(PlaylistsStates.action)


#—Ä–µ–¥–∞–∫—Ç—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Å–µ–Ω
@router.callback_query(F.data == "edit_songs", PlaylistsStates.wait_choose)
async def edit_songs(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    name_playlist = data['name_playlist']
    markup = InlineKeyboardBuilder()
    delete_songs = types.InlineKeyboardButton(
        text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –ø–µ—Å–Ω–∏",
        callback_data="delete_songs"
    )
    rebase_song = types.InlineKeyboardButton(
        text="üéµ –ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–µ—Å–Ω–∏",
        callback_data="rebase_song"
    )
    markup.add(delete_songs, rebase_song)
    markup.adjust(1, 1)
    await callback.message.edit_text(text=f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∞–¥ –ø–ª–µ–π–ª–∏—Å—Ç–æ–º {name_playlist}", markup = markup.as_markup())
    await state.set_state(PlaylistsStates.edit_songs)


#—É–¥–∞–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏
@router.callback_query(F.data == "delete_songs", PlaylistsStates.edit_songs)
async def delete_songs(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    data = await state.get_data()
    playlists = data['playlists']
    indexes = message.text.split(",")
    try:
        for i in indexes:
            if 0 <= int(i) < len(playlists[data['name_playlist']]):
                name_song = playlists[data['name_playlist']][int(i) - 1]
                ok = remove_song_from_playlist(data['name_playlist'], user_id, name_song)
                if not ok:
                    await message.answer("–ü—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
                else:
                    mes_text = f"–ü–µ—Å–Ω—è(–∏) —É–¥–∞–ª–µ–Ω–∞(—ã)"
                    await message.answer(text=mes_text)

    except Exception as e:
        await message.answer(text=f"–û—à–∏–±–∫–∞:{e}")
        return

    await state.set_state(PlaylistsStates.action)



#—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–µ—Å–µ–Ω –º–µ–∂–¥—É –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏
@router.callback_query(F.data == "rebase_song", PlaylistsStates.edit_songs)
async def rebase_song(callback: types.CallbackQuery, state: FSMContext):
    #TODO —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ª–æ–≥–∏–∫—É –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–µ—Å–µ–Ω
    markup = InlineKeyboardBuilder()
    data = await state.get_data()
    playlists = data['playlists']
    mes_text = "–í—ã–±–µ—Ä–∏—Ç–µ –≤ –∫–∞–∫–æ–π –ø–ª–µ–π–ª–∏—Å—Ç —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø–µ—Å–Ω—é"
    for name in playlists.keys():
        markup.add(types.InlineKeyboardButton(text = str(name), callback_data= str(name)))
    markup.adjust(1, 1)
    await callback.message.edit_text(text=mes_text, reply_markup=markup.as_markup())
    await state.set_state(PlaylistsStates.rebase_song)


#—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø–µ—Å–µ–Ω –º–µ–∂–¥—É –ø–ª–µ–π–ª–∏—Å—Ç–∞–º–∏
@router.callback_query(PlaylistsStates.rebase_song)
async def rebase_song(callback: types.CallbackQuery, state: FSMContext):
    new_playlist = callback.data
    await state.update_data(new_playlist=new_playlist)
    markup = InlineKeyboardBuilder()
    data = await state.get_data()
    data.update()
    playlists = data['playlists']
    old_playlists = data['name_playlists']
    mes_text = "–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å"
    count = 0
    for name in playlists[old_playlists]:
        count += 1
        mes_text += f"\n{count}: {name}"

    await callback.message.edit_text(text=mes_text, reply_markup=markup.as_markup())
    await state.set_state(PlaylistsStates.rebase_song)

@router.message(PlaylistsStates.rebase_song)
async def rebase_song(message: types.Message, state: FSMContext):
    data = await state.get_data()
    new_playlist = data['new_playlist']
    old_playlists = data['name_playlists']
    song_name = message.text
    ok = rebase_song_from_playlist(song_name, new_playlist, old_playlists)
    if not ok:
        await message.answer("–ü—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ")
    else:
        mes_text = f"–ü–µ—Å–Ω—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤ –ø–ª–µ–π–ª–∏—Å—Ç {new_playlist}"
        await message.answer(text=mes_text)


#–ø—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –ø–µ—Å–µ–Ω
@router.callback_query(F.data == "listen", PlaylistsStates.choose_action)
async def listen_menu(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    playlists = data['playlists']
    markup = InlineKeyboardBuilder()
    sequential = types.InlineKeyboardButton(
        text="‚ñ∂Ô∏è –ü–æ –ø–æ—Ä—è–¥–∫—É",
        callback_data="sequential"
    )
    shuffle = types.InlineKeyboardButton(
        text="üîÄ –ü–µ—Ä–µ–º–µ—à–∞—Ç—å",
        callback_data="shuffle"
    )
    markup.add(shuffle, sequential)
    markup.adjust(1, 1)

    songs = ""
    for song in playlists[data['name_playlist']]:
        songs += f"\n{song}"
    await callback.message.edit_text(text=songs, reply_markup=markup.as_markup())
    await state.set_state(PlaylistsStates.wait_choose)



@router.callback_query(F.data.in_({"sequential", "shuffle"}), PlaylistsStates.wait_choose)
async def change_song(callback_query: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    playlists = data['playlists']
    order = callback_query.data

    # 1. –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –≤—ã–∑–æ–≤–µ
    original_songs = data.get('original_list', playlists[data['name_playlist']])
    await state.update_data(original_list=original_songs)

    # 2. –†–∞–±–æ—Ç–∞–µ–º —Å –∫–æ–ø–∏–µ–π –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞
    songs = original_songs.copy()

    if order == 'shuffle':
        import random
        # 3. –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –∫–æ–ø–∏—é, –Ω–µ –∏–∑–º–µ–Ω—è—è –æ—Ä–∏–≥–∏–Ω–∞–ª
        shuffled_songs = songs.copy()
        random.shuffle(shuffled_songs)
        await state.update_data(page=0, current_list=shuffled_songs)
    else:
        # 4. –î–ª—è sequential –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é
        await state.update_data(page=0, current_list=songs)

    # 5. –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    new_data = await state.get_data()
    song_list = new_data['current_list']
    page = new_data.get('page', 0)

    # 6. –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    start = page * 1
    end = start + 1
    current_songs = song_list[start:end]

    markup = InlineKeyboardBuilder()

    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    if page > 0:
        markup.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"previous:{page - 1}"
        ))
    if end < len(song_list):
        markup.add(types.InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
            callback_data=f"next:{page + 1}"
        ))
    markup.adjust(1, 1)

    songs_text = ("\n".join(current_songs) if current_songs else "–ù–µ—Ç –ø–µ—Å–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

    await callback_query.message.edit_text(songs_text, reply_markup=markup.as_markup())
    await state.update_data(page=page)


@router.callback_query(F.data.startswith("previous:"), PlaylistsStates.wait_choose)
@router.callback_query(F.data.startswith("next:"), PlaylistsStates.wait_choose)
async def navigate_pages(callback_query: types.CallbackQuery, state: FSMContext):
    # 8. –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    data = await state.get_data()
    page = int(callback_query.data.split(":")[1])

    # 9. –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –Ω–æ–º–µ—Ä–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    max_page = len(data['current_list']) - 1
    page = max(0, min(page, max_page))

    await state.update_data(page=page)

    # 10. –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞
    data = await state.get_data()
    song_list = data['current_list']

    # –õ–æ–≥–∏–∫–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è (–∫–∞–∫ –≤ change_song)
    start = page * 1
    end = start + 1
    current_songs = song_list[start:end]

    markup = InlineKeyboardBuilder()
    if page > 0:
        markup.add(types.InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ü—Ä–µ–¥—ã–¥—É—â–∞—è",
            callback_data=f"previous:{page - 1}"
        ))
    if end < len(song_list):
        markup.add(types.InlineKeyboardButton(
            text="‚û°Ô∏è –°–ª–µ–¥—É—é—â–∞—è",
            callback_data=f"next:{page + 1}"
        ))
    markup.adjust(1, 1)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–∂–∏–º–∞
    songs_text = ("\n".join(current_songs) if current_songs else "–ù–µ—Ç –ø–µ—Å–µ–Ω –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")

    await callback_query.message.edit_text(songs_text, reply_markup=markup.as_markup())
