from aiogram import F, types, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states.states_recommendations import RecommendationsStates

router = Router()

#—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
@router.message(F.text.endswith("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"))
async def start_recommendations(message: types.Message, state: FSMContext):

    markup = InlineKeyboardBuilder()
    by_user = types.InlineKeyboardButton(
        text="üë• –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Ö–æ–∂–∏–º –≤–∫—É—Å–æ–º",
        callback_data="user"
    )
    by_similar = types.InlineKeyboardButton(
        text="üé∂ –ü–æ—Ö–æ–∂–∏–µ –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä",
        callback_data="similar"
    )
    by_mood = types.InlineKeyboardButton(
        text="üòä –ü–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é",
        callback_data="mood"
    )

    markup.add(by_mood, by_user, by_similar)
    markup.adjust(1, 1)

    sent_message = await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", reply_markup=markup.as_markup())
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(RecommendationsStates.choose_recommendations)


# –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Ö–æ–∂–∏–º –≤–∫—É—Å–æ–º
@router.callback_query(F.data == "user", RecommendationsStates.choose_recommendations)
async def sad_mood(callback: types.CallbackQuery, state: FSMContext):
    # TODO –∑–∞–ø—Ä–æ—Å –∫ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ—Ö–æ–∂–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5",
             "Song 6", "Song 7", "Song 8", "Song 9", "Song 10"]

    await state.update_data(
        songs=songs,
        current_index=0,
        total=len(songs)
    )

    await callback.message.edit_text(
        text=f"üë• –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Ö–æ–∂–∏–º –≤–∫—É—Å–æ–º:\nüéµ {songs[0]}",
        reply_markup=get_pagination_markup(0, len(songs))
    )
    await state.set_state(RecommendationsStates.wait_recommendations)


@router.callback_query(F.data == "similar", RecommendationsStates.choose_recommendations)
async def sad_mood(callback: types.CallbackQuery, state: FSMContext):
    # TODO –∑–∞–ø—Ä–æ—Å –∫ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ—Ö–æ–∂–∏–π –ø–ª–µ–π–ª—Å–∏—Ç –Ω–∞ –≤–∞—à
    songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5",
             "Song 6", "Song 7", "Song 8", "Song 9", "Song 10"]

    await state.update_data(
        songs=songs,
        current_index=0,
        total=len(songs)
    )

    await callback.message.edit_text(
        text=f"üé∂ –ü–æ—Ö–æ–∂–∏–µ –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä:\nüéµ {songs[0]}",
        reply_markup=get_pagination_markup(0, len(songs))
    )
    await state.set_state(RecommendationsStates.wait_recommendations)


#–ü–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
@router.callback_query(F.data == "mood", RecommendationsStates.choose_recommendations)
async def choose_mood(callback: types.CallbackQuery, state: FSMContext):
    markup = InlineKeyboardBuilder()
    by_sad = types.InlineKeyboardButton(
        text="–ì—Ä—É—Å—Ç–Ω–æ–µ üò¢",
        callback_data="sad"
    )
    by_happy = types.InlineKeyboardButton(
        text="–í–µ—Å–µ–ª–æ–µ üôÇ",
        callback_data="happy"
    )
    by_relax = types.InlineKeyboardButton(
        text="–°–ø–æ–∫–æ–π–Ω–æ–µ ü•±",
        callback_data="relax"
    )
    by_cheerful = types.InlineKeyboardButton(
        text="–ë–æ–¥—Ä–æ–µ üíÉ",
        callback_data="cheerful"
    )

    markup.add(by_happy, by_sad, by_relax, by_cheerful)
    markup.adjust(1, 1, 1, 1)

    mes_text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
    await callback.message.edit_text(text=mes_text, reply_markup=markup.as_markup())
    await state.set_state(RecommendationsStates.choose_recommendations)


@router.callback_query(F.data == "sad", RecommendationsStates.choose_recommendations)
async def sad_mood(callback: types.CallbackQuery, state: FSMContext):
    # TODO –∑–∞–ø—Ä–æ—Å –∫ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é "–ì—Ä—É—Å—Ç–Ω–æ–µ"
    songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5",
             "Song 6", "Song 7", "Song 8", "Song 9", "Song 10"]

    await state.update_data(
        songs=songs,
        current_index=0,
        total=len(songs)
    )

    await callback.message.edit_text(
        text=f"–ì—Ä—É—Å—Ç–Ω–æ–µ üò¢\nüéµ {songs[0]}",
        reply_markup=get_pagination_markup(0, len(songs))
    )
    await state.set_state(RecommendationsStates.wait_recommendations)


@router.callback_query(F.data == "happy", RecommendationsStates.choose_recommendations)
async def happy_mood(callback: types.CallbackQuery, state: FSMContext):
    # TODO –∑–∞–ø—Ä–æ—Å –∫ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é "–í–µ—Å–µ–ª–æ–µ"
    songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5",
             "Song 6", "Song 7", "Song 8", "Song 9", "Song 10"]

    await state.update_data(
        songs=songs,
        current_index=0,
        total=len(songs)
    )

    await callback.message.edit_text(
        text=f"–í–µ—Å–µ–ª–æ–µ üôÇ\nüéµ {songs[0]}",
        reply_markup=get_pagination_markup(0, len(songs))
    )
    await state.set_state(RecommendationsStates.wait_recommendations)

@router.callback_query(F.data == "relax", RecommendationsStates.choose_recommendations)
async def relax_mood(callback: types.CallbackQuery, state: FSMContext):
    #TODO –∑–∞–ø—Ä–æ—Å –∫ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é "–°–ø–æ–∫–æ–Ω–æ–µ"
    songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5",
             "Song 6", "Song 7", "Song 8", "Song 9", "Song 10"]

    await state.update_data(
        songs=songs,
        current_index=0,
        total=len(songs)
    )

    await callback.message.edit_text(
        text=f"–°–ø–æ–∫–æ–π–Ω–æ–µ ü•±\nüéµ {songs[0]}",
        reply_markup=get_pagination_markup(0, len(songs))
    )
    await state.set_state(RecommendationsStates.wait_recommendations)


@router.callback_query(F.data == "cheerful", RecommendationsStates.choose_recommendations)
async def cheerful_mood(callback: types.CallbackQuery, state: FSMContext):
    # TODO –∑–∞–ø—Ä–æ—Å –∫ –∞–ª–≥–æ—Ä–∏—Ç–º—É –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é "–ë–æ–¥—Ä–æ–µ–µ"
    songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5",
             "Song 6", "Song 7", "Song 8", "Song 9", "Song 10"]

    await state.update_data(
        songs=songs,
        current_index=0,
        total=len(songs)
    )

    await callback.message.edit_text(
        text=f"–ë–æ–¥—Ä–æ–µ üíÉ\nüéµ {songs[0]}",
        reply_markup=get_pagination_markup(0, len(songs))
    )
    await state.set_state(RecommendationsStates.wait_recommendations)



#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü
@router.callback_query(F.data.in_({"next", "prev"}))
async def handle_pagination(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data["current_index"]
    total = data["total"]
    songs = data["songs"]

    if callback.data == "next" and current_index < total - 1:
        current_index += 1
    elif callback.data == "prev" and current_index > 0:
        current_index -= 1

    await state.update_data(current_index=current_index)

    await callback.message.edit_text(
        text=f"üéµ {songs[current_index]}",
        reply_markup=get_pagination_markup(current_index, total)
    )
    await callback.answer()

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –ø–µ—Ä–µ–ª–∏—Å—Ç—ã–≤–∞–Ω–∏—è –∏ –æ—Ü–µ–Ω–∏–≤–∞–Ω–∏—è
def get_pagination_markup(current_index: int, total: int):
    builder = InlineKeyboardBuilder()

    # –°—Ç—Ä–æ–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    pagination_buttons = []
    if current_index > 0:
        pagination_buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="prev"))
    pagination_buttons.append(InlineKeyboardButton(text=f"{current_index + 1}/{total}", callback_data="ignore"))
    if current_index < total - 1:
        pagination_buttons.append(InlineKeyboardButton(text="‚û°Ô∏è", callback_data="next"))
    builder.row(*pagination_buttons)

    # –°—Ç—Ä–æ–∫–∞ —Ä–µ–∞–∫—Ü–∏–π
    builder.row(
        InlineKeyboardButton(text="üëç", callback_data="like"),
        InlineKeyboardButton(text="üëé", callback_data="dislike")
    )

    # –°—Ç—Ä–æ–∫–∞ –ø–ª–µ–π–ª–∏—Å—Ç–∞
    builder.row(
        InlineKeyboardButton(
            text="–î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç",
            callback_data="add_to_playlist"
        )
    )

    return builder.as_markup()

#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–ª–µ–π–ª–∏—Å—Ç
@router.callback_query(F.data == "add_to_playlist")
async def handle_playlist(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index = data["current_index"]
    songs = data["songs"]
    selected_song = songs[current_index]

    #TODO —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Å–Ω–∏ –≤ –ø–ª–µ–π–ª–∏—Å—Ç

    await callback.answer(
        text=f"¬´{selected_song}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø–ª–µ–π–ª–∏—Å—Ç!",
        show_alert=False
    )


#–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤ –∏ –¥–∏–∑–ª–∞–π–∫–æ–≤
@router.callback_query(F.data.in_({"like", "dislike"}))
async def handle_reaction(callback: types.CallbackQuery):
    #TODO —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –ø–µ—Å–Ω—é –≤ –ø–ª–µ–π–ª–∏—Å—Ç
    reaction = "–ª–∞–π–∫–Ω—É—Ç–∞" if callback.data == "like" else "–¥–∏–∑–ª–∞–π–∫–Ω—É—Ç–∞"
    await callback.answer(f"–ü–µ—Å–Ω—è {reaction}!", show_alert=False)




