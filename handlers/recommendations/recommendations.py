from aiogram import F, types, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

from states.states_recommendations import RecommendationsStates

router = Router()
#TODO —É–±—Ä–∞—Ç—å –¥—É–¥–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π

#–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –æ—Ü–µ–Ω–æ–∫
grade_markup =InlineKeyboardBuilder()
like = types.InlineKeyboardButton(
    text="‚ù§Ô∏è –ü–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å",
    callback_data="like"
)
dislike = types.InlineKeyboardButton(
    text="üëé –ù–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å",
    callback_data="dislike"
)
playlist = types.InlineKeyboardButton(
    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç",
    callback_data="add_in_playlist"
)

grade_markup.add(like, dislike, playlist)
grade_markup.adjust(1, 1)


#—Å—Ç–∞—Ä—Ç–æ–≤–æ–µ –æ–∫–Ω–æ
@router.message(F.text.endswith("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"))
async def start_recommendations(message: types.Message, state: FSMContext):

    markup = InlineKeyboardBuilder()
    by_user = types.InlineKeyboardButton(
        text="üë• –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Ö–æ–∂–∏–º –≤–∫—É—Å–æ–º",
        callback_data="user"
    )
    by_similar = types.InlineKeyboardButton(
        text="üé∂ –ü–æ—Ö–æ–∂–∏–µ –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä",
        callback_data="similar"
    )
    by_mood = types.InlineKeyboardButton(
        text="üòä –ü–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é",
        callback_data="mood"
    )

    markup.add(by_mood, by_user, by_similar)
    markup.adjust(1, 1)

    sent_message = await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:", reply_markup=markup.as_markup())
    await state.update_data(last_message_id=sent_message.message_id)
    await state.set_state(RecommendationsStates.choose_recommendations)


# –û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–æ—Ö–æ–∂–∏–º –≤–∫—É—Å–æ–º
@router.callback_query(F.data == "user", RecommendationsStates.choose_recommendations)
async def user_rec(callback: types.CallbackQuery, state: FSMContext):
    mes_text = ("–í–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç–∞–∫–∏–º –∂–µ –≤–∫—É—Å–æ–º:"
                "\nSong\nSong\nSong\nSong\nSong\nSong\nSong")
    await callback.message.edit_text(text=mes_text)
    await state.set_state(RecommendationsStates.wait_recommendations)

# –ü–æ—Ö–æ–∂–∏–µ –Ω–∞ –≤–∞—à –≤—ã–±–æ—Ä
@router.callback_query(F.data == "similar", RecommendationsStates.choose_recommendations)
async def similar_rec(callback: types.CallbackQuery, state: FSMContext):
    mes_text = ("–í–æ—Ç –ø–ª–µ–π–ª–∏—Å—Ç –ø–æ—Ö–æ–∂–∏–π –Ω–∞ –≤–∞—à:"
                "\nSong\nSong\nSong\nSong\nSong\nSong\nSong")
    await callback.message.edit_text(text=mes_text)
    await state.set_state(RecommendationsStates.wait_recommendations)

#–ü–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é
@router.callback_query(F.data == "mood", RecommendationsStates.choose_recommendations)
async def choose_mood(callback: types.CallbackQuery, state: FSMContext):
    markup = InlineKeyboardBuilder()
    by_sad = types.InlineKeyboardButton(
        text="–ì—Ä—É—Å—Ç–Ω–æ–µ üò¢",
        callback_data="sad"
    )
    by_happy = types.InlineKeyboardButton(
        text="–í–µ—Å–µ–ª–æ–µ üôÇ",
        callback_data="happy"
    )
    by_relax = types.InlineKeyboardButton(
        text="–°–ø–æ–∫–æ–π–Ω–æ–µ ü•±",
        callback_data="relax"
    )
    by_cheerful = types.InlineKeyboardButton(
        text="–ë–æ–¥—Ä–æ–µ üíÉ",
        callback_data="cheerful"
    )

    markup.add(by_happy, by_sad, by_relax, by_cheerful)
    markup.adjust(1, 1, 1, 1)

    mes_text = "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ"
    await callback.message.edit_text(text=mes_text, reply_markup=markup.as_markup())
    await state.set_state(RecommendationsStates.choose_recommendations)


#sad mood
@router.callback_query(F.data == "sad", RecommendationsStates.choose_recommendations)
async def sad_mood(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–í–æ—Ç –≥—Ä—É—Å—Ç–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç:\n"
    songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5", "Song 6", "Song 7", "Song 8", "Song 9", "Song 10"]

    for song in songs:
        mes_text += f"{song}\n"
        await callback.message.answer(text=mes_text, reply_markup=grade_markup.as_markup())

    await state.set_state(RecommendationsStates.wait_recommendations)

#happy mood
@router.callback_query(F.data == "happy", RecommendationsStates.choose_recommendations)
async def happy_mood(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–í–æ—Ç –≤–µ—Å—ë–ª—ã–π –ø–ª–µ–π–ª–∏—Å—Ç:\n"
    songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5", "Song 6", "Song 7", "Song 8", "Song 9", "Song 10"]

    for song in songs:
        mes_text += f"{song}\n"
        await callback.message.answer(text=mes_text, reply_markup=grade_markup.as_markup())

    await state.set_state(RecommendationsStates.wait_recommendations)

#relax mood
@router.callback_query(F.data == "relax", RecommendationsStates.choose_recommendations)
async def relax_mood(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–í–æ—Ç —Å–ø–æ–∫–æ–π–Ω—ã–π –ø–ª–µ–π–ª–∏—Å—Ç:\n"
    songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5", "Song 6", "Song 7", "Song 8", "Song 9", "Song 10"]

    for song in songs:
        mes_text += f"{song}\n"
        await callback.message.answer(text=mes_text,  reply_markup=grade_markup.as_markup())

    await state.set_state(RecommendationsStates.wait_recommendations)

#cheerful mood
@router.callback_query(F.data == "cheerful", RecommendationsStates.choose_recommendations)
async def cheerful_mood(callback: types.CallbackQuery, state: FSMContext):
    mes_text = "–í–æ—Ç –±–æ–¥—Ä—ã–π –ø–ª–µ–π–ª–∏—Å—Ç:\n"
    songs = ["Song 1", "Song 2", "Song 3", "Song 4", "Song 5", "Song 6", "Song 7", "Song 8", "Song 9", "Song 10"]

    for song in songs:
        mes_text += f"{song}\n"
        await callback.message.answer(text=mes_text, reply_markup=grade_markup.as_markup())

    await state.set_state(RecommendationsStates.wait_recommendations)