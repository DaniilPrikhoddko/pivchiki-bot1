"""
2. –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç –∫–Ω–æ–ø–∫—É üéµ –ü–æ–∏—Å–∫ –º—É–∑—ã–∫–∏.
–ë–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø–æ–∏—Å–∫–∞:
üîç –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é
‚úçÔ∏è –ü–æ –∞–≤—Ç–æ—Ä—É
üé§ –ü–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç —Ç–∏–ø –ø–æ–∏—Å–∫–∞:
–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω üîç –ü–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∏–ª–∏ ‚úçÔ∏è –ü–æ –∞–≤—Ç–æ—Ä—É, –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–π –≤–≤–æ–¥.
–ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω üé§ –ü–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é, –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
–ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –∏ –≤—ã–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ 10 –ø–µ—Å–µ–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
Copy
1. –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ - –ê–≤—Ç–æ—Ä
2. –ù–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ - –ê–≤—Ç–æ—Ä
...
–ü–æ–¥ —Å–ø–∏—Å–∫–æ–º –∫–Ω–æ–ø–∫–∏:
–í—ã–±—Ä–∞—Ç—å –ø–µ—Å–Ω—é (1-10) (–∫–Ω–æ–ø–∫–∏ —Å –Ω–æ–º–µ—Ä–∞–º–∏)
üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–±–∏—Ä–∞–µ—Ç –ø–µ—Å–Ω—é:
–ë–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–µ—Å–Ω—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ .mp3.
–ü–æ–¥ –ø–µ—Å–Ω–µ–π –∫–Ω–æ–ø–∫–∏:
‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç
üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É
–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∏–º–∞–µ—Ç ‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç, –±–æ—Ç –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–±—Ä–∞—Ç—å –ø–ª–µ–π–ª–∏—Å—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ (—Å–º. —Ä–∞–∑–¥–µ–ª "–ú–æ–∏ –ø–ª–µ–π–ª–∏—Å—Ç—ã").
"""
from aiogram import F, types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å—ã
from states.states_search import SearchStates

# –ø–∞—Ä—Å–µ—Ä –∏–∑ —é—Ç—É–±–∞
from sources.parsers.parser_youtube import find_song, download_song

router = Router()

@router.callback_query(F.data == 'search')
async def start_search(callback: types.CallbackQuery, state: FSMContext):
    # TODO —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è callback.message.message_id

    markup = InlineKeyboardBuilder()
    by_text = types.InlineKeyboardButton(
        text="‚úçÔ∏è –ü–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –≤–≤–æ–¥—É",
        callback_data="text"
    )
    by_audio = types.InlineKeyboardButton(
        text="üé§ –ü–æ –≥–æ–ª–æ—Å–æ–≤–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é",
        callback_data="audio"
    )
    markup.add(by_text, by_audio)
    markup.adjust(1, 1)
    await callback.message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–æ–∏—Å–∫–∞:", reply_markup=markup.as_markup())
    await state.set_state(SearchStates.choose_method)


@router.callback_query(F.data == "text", SearchStates.choose_method)
async def get_info_about_song(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(text="–ü—Ä–∏–Ω—è—Ç–æ! –¢–æ–≥–¥–∞ –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å. –£–∫–∞–∂–∏—Ç–µ –∏–º—è –∏/–∏–ª–∏ –∞–≤—Ç–æ—Ä–∞:")
    await state.set_state(SearchStates.wait_info_about_song)


@router.message(F.text, SearchStates.wait_info_about_song)
async def request_processing(message: types.Message, state: FSMContext):
    await message.answer("–ò—â—É! –ú–∏–Ω—É—Ç–∫—É...")
    # result_search, data, count = find_song(message.text)
    result_search = """
–ù–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:
1. The neighborhood playlist - Melodylian
2. The Neighbourhood - Sweater Weather (Official Video) - The Neighbourhood
3. The Neighbourhood - Softcore (Official Audio) - The Neighbourhood
4. The Neighbourhood - Reflections (Official Audio) - The Neighbourhood
5. The Neighbourhood - W.D.Y.W.F.M? (Official Audio) - The Neighbourhood
6. The Neighbourhood - You Get Me So High (Official Audio) - The Neighbourhood
7. The Neighbourhood - Afraid (Official Audio) - The Neighbourhood
8. The Neighbourhood - A Little Death (Official Audio) - The Neighbourhood
9. the neighbourhood - r.i.p. 2 my youth // slowed + reverb - kouyou
10. The Neighbourhood - Reflections (Lyrics) - Aura Melodies

–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–µ–∫–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–∏—Å–∫:
    """
    count = 10

    # TODO –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Ö–æ—Ç—å —á—Ç–æ-—Ç–æ –Ω–∞—à–ª–æ—Å—å
    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–∏—Å–∫–∞
    # await state.update_data({"result": data})

    markup = InlineKeyboardBuilder()
    for i in range(count):
        btn = types.InlineKeyboardButton(
            text=f"{i + 1}",
            callback_data=f"song_{i + 1}"
        )
        markup.add(btn)

    second_time = types.InlineKeyboardButton(
        text="üîÑ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –ø–æ–∏—Å–∫",
        callback_data="search"
    )
    markup.add(second_time)
    markup.adjust(5, 5, 1)

    await message.answer(text=result_search, reply_markup=markup.as_markup())
    await state.set_state(SearchStates.send_song)


@router.callback_query(
    F.data.in_([f"song_{i + 1}" for i in range(10)]),
    SearchStates.send_song
)
async def send_song(callback: types.CallbackQuery, state: FSMContext):
    # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ö–µ–Ω–¥–ª–µ—Ä–∞ –≤—ã—à–µ
    # data = await state.get_data()
    # result = data["result"]

    path = "sources/songs"

    markup = InlineKeyboardBuilder()
    markup.add(types.InlineKeyboardButton(
        text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≤ –ø–ª–µ–π–ª–∏—Å—Ç",
        callback_data="add_song"
    ))

    # path_with_song = download_song(int(callback.data), result, path)
    path_with_song = path + "/The neighborhood playlist.mp3"
    # TODO –ø—Ä–æ–≤–µ—Ä–∫–∏ —á—Ç–æ —Å–∫–∞—á–∞–ª–æ—Å—å
    file = FSInputFile(path_with_song)
    await callback.message.answer_audio(file, reply_markup=markup.as_markup())
    await state.clear()
